{"version":3,"sources":["API.ts","BBoxForm.tsx","LineContainer.tsx","FeatureInfoDisplay.tsx","App.tsx","index.tsx"],"names":["convertToStringArray","bboxCoords","map","String","getBBGeoJson","a","axios","get","response","geoJson","osmtogeojson","data","Form","styled","form","Heading","div","Input","input","Box","Middle","Button","button","BBoxForm","submit","React","minLng","setMinLng","minLat","setMinLat","maxLng","setMaxLng","maxLat","setMaxLat","onSubmit","e","preventDefault","parseFloat","id","data-testid","placeholder","name","type","value","onChange","target","LineContainer","features","activeFeature","featureClicked","mapState","latLngToPixel","width","height","style","top","left","feature","geometry","coordinates","coordArray","index","coordsArray","colour","activeFeatureStrokeWidth","onClick","Line","center","zoom","pointsString","scaleLinear","domain","range","length","i","pixelCoord","points","stroke","fill","strokeWidth","Container","Name","FeatureInfoDisplay","mapTilerProvider","x","y","z","dpr","createMinBoundary","createMaxBoundary","App","useState","setBBoxCoords","updateData","setActiveFeature","useEffect","bbGeoJson","console","log","getDataSet","selectedFeature","find","properties","defaultCenter","defaultZoom","provider","coords","latLng","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ee9eb43.chunk.js","sourcesContent":["import axios from \"axios\";\nimport osmtogeojson from \"osmtogeojson\";\n\n// min_lon,min_lat,max_lon,max_lat.\n\nexport type Member = {\n  ref: number;\n  role: string;\n  type: string;\n};\n\nexport type Tags = {\n  castle_type: string;\n  height: string;\n  historic: string;\n  name: string;\n  opening_hours: string;\n  phone: string;\n  tourism: string;\n  type: string;\n  wikidata: string;\n  wikipedia: string;\n};\n\nexport type Element = {\n  changeset: number;\n  id: number;\n  members: Member[];\n  tags: Tags;\n  timestamp: string;\n  type: string;\n  uid: number;\n  user: string;\n  version: number;\n};\n\nexport type OSMDataResponse = {\n  attribution: string;\n  bounds: {\n    maxlat: number;\n    maxlon: number;\n    minlat: number;\n    minlon: number;\n  };\n  elements: Element[];\n  generator: string;\n  license: string;\n  version: number;\n};\n\nexport const convertToStringArray = (bboxCoords: number[]): string[] => {\n  return bboxCoords.map(String);\n};\n\nexport const getBBGeoJson = async (bboxCoords: number[]) => {\n  const response = await axios.get<OSMDataResponse>(\n    `https://www.openstreetmap.org/api/0.6/map?bbox=${convertToStringArray(\n      bboxCoords\n    )}`\n  );\n  const geoJson = osmtogeojson(response.data);\n  return geoJson;\n};\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  position: absolute;\n  z-index: 10;\n  top: 10px;\n  left: 10px;\n  background: white;\n  padding: 10px;\n  border-radius: 10px;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  align-items: center;\n`;\n\nconst Heading = styled.div`\n  font-size: 20px;\n  margin-bottom: 20px;\n`;\n\nconst Input = styled.input`\n  position: relative;\n  width: 85px;\n  height: 25px;\n  font-size: 16px;\n  text-align: center;\n  border: 1px solid #1b8cc4;\n  border-radius: 5px;\n  transition: 0.3s;\n  :hover {\n    box-shadow: #1b8cc4 0px 3px 8px;\n  }\n`;\nconst Box = styled.div`\n  height: 50px;\n  width: 100px;\n  margin: 5px;\n  border: 1px solid black;\n`;\n\nconst Middle = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst Button = styled.button`\n  margin: 20px 0px;\n  background: #1b8cc4;\n  border-radius: 5px;\n  border: none;\n  padding: 10px;\n  color: white;\n  transition: 0.3s;\n  cursor: default;\n  :hover {\n    background: #0c4561;\n  }\n`;\n\nexport const BBoxForm = ({\n  submit,\n}: {\n  submit: (bboxCoords: number[]) => void;\n}) => {\n  const [minLng, setMinLng] = React.useState<string>(\"\");\n  const [minLat, setMinLat] = React.useState<string>(\"\");\n  const [maxLng, setMaxLng] = React.useState<string>(\"\");\n  const [maxLat, setMaxLat] = React.useState<string>(\"\");\n\n  return (\n    <Form\n      onSubmit={(e) => {\n        e.preventDefault();\n        submit([\n          parseFloat(minLng!),\n          parseFloat(minLat!),\n          parseFloat(maxLng!),\n          parseFloat(maxLat!),\n        ]);\n      }}\n    >\n      <Heading id=\"top-text\">enter Boundary Box manually</Heading>\n      <Input\n        data-testid=\"max-lat\"\n        placeholder=\"Max Lat\"\n        name=\"max-lat\"\n        type=\"text\"\n        value={maxLat}\n        onChange={(e) => {\n          setMaxLat(e.target.value);\n        }}\n      />\n      <Middle>\n        <Input\n          data-testid=\"min-lng\"\n          placeholder=\"Min Lng\"\n          name=\"min-lng\"\n          type=\"text\"\n          value={minLng}\n          onChange={(e) => setMinLng(e.target.value)}\n        />\n        <Box />\n        <Input\n          data-testid=\"max-lng\"\n          placeholder=\"Max Lng\"\n          name=\"max-lng\"\n          type=\"text\"\n          value={maxLng}\n          onChange={(e) => setMaxLng(e.target.value)}\n        />\n      </Middle>\n      <Input\n        data-testid=\"min-lat\"\n        placeholder=\"Min Lat\"\n        type=\"text\"\n        value={minLat}\n        onChange={(e) => setMinLat(e.target.value)}\n      />\n      <Button data-testid=\"bbox-submit\" type=\"submit\">\n        Search\n      </Button>\n      <Heading id=\"bottom-text\">...or just click the map!</Heading>\n    </Form>\n  );\n};\n","import * as React from \"react\";\nimport { scaleLinear } from \"d3-scale\";\nimport { Feature, GeometryObject } from \"geojson\";\nimport { Point } from \"pigeon-maps/lib/types\";\n\ntype PigeonMapInjectedProps = Partial<{\n  mapState: {\n    width: number;\n    height: number;\n    zoom: number;\n    center: number;\n  };\n  latLngToPixel: (latLang: Point, center: number, zoom: number) => Point;\n}>;\n\nexport const LineContainer = ({\n  // supplied by us\n  features,\n  activeFeature,\n  featureClicked,\n  // mapState is injected by the <Map /> (pigeon component)\n  mapState,\n  // latLngToPixel is injected by the <Map /> (pigeon component)\n  latLngToPixel,\n}: {\n  features: Feature<GeometryObject, any>[];\n  activeFeature: string | undefined;\n  featureClicked: (featureID: string) => void;\n} & PigeonMapInjectedProps) => {\n  return (\n    <svg\n      width={mapState!.width}\n      height={mapState!.height}\n      style={{ top: 0, left: 0 }}\n    >\n      {features.map((feature: any) =>\n        feature.geometry.coordinates.map(\n          (coordArray: Point[], index: string) => (\n            <Line\n              mapState={mapState!}\n              latLngToPixel={latLngToPixel}\n              // create a key combining values as some feature share the same id\n              key={`${feature.id}-${index}`}\n              coordsArray={coordArray}\n              colour={feature.id === activeFeature ? \"red\" : \"#1b8cc4\"}\n              activeFeatureStrokeWidth={feature.id === activeFeature ? 8 : 5}\n              onClick={() => {\n                featureClicked(feature.id);\n              }}\n            />\n          )\n        )\n      )}\n    </svg>\n  );\n};\n\nconst Line = ({\n  coordsArray,\n  colour,\n  activeFeatureStrokeWidth,\n  onClick,\n  mapState,\n  latLngToPixel,\n}: {\n  coordsArray: Point[];\n  colour: string;\n  activeFeatureStrokeWidth: number;\n  onClick: () => void;\n} & PigeonMapInjectedProps) => {\n  // deconstruct mapState props\n  const { center, zoom } = mapState!;\n  // set our stroke width based on how zoomed in the user is. Thicker when zoomed out and thinner when zoomed in.\n  const lineStrokeScale = React.useMemo(\n    // pigeon maps zoom values range min/max 1 -> 18\n    () => scaleLinear().domain([1, 18]).range([2, 5]),\n    []\n  );\n\n  let pointsString = ``;\n  if (coordsArray.length < 2) return null;\n  for (let i = 0; i < coordsArray.length; i++) {\n    // GEOJSON is [lng, lat] instead of [lat, lng]\n    let pixelCoord = latLngToPixel!(\n      [coordsArray[i][1], coordsArray[i][0]],\n      center,\n      zoom\n    );\n    // polyline string format style \"0,100 50,25 50,75 100,0\"\n    pointsString += `${pixelCoord[0]},${pixelCoord[1]} `;\n  }\n\n  return pointsString ? (\n    <polyline\n      data-testid=\"poly-line\"\n      onClick={() => onClick()}\n      points={pointsString}\n      stroke={colour}\n      fill=\"none\"\n      strokeWidth={activeFeatureStrokeWidth}\n    />\n  ) : null;\n};\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  position: absolute;\n  z-index: 10;\n  top: 325px;\n  left: 10px;\n  background: white;\n  padding: 10px;\n  border-radius: 10px;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  align-items: center;\n`;\n\nconst Name = styled.div`\n  font-size: 20px;\n`;\n\nexport const FeatureInfoDisplay = ({ name }: { name: string }) => {\n  return (\n    <Container>\n      <Name>{name ? name : \"No specified name\"}</Name>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport { getBBGeoJson } from \"./API\";\nimport { Map, Point } from \"pigeon-maps\";\nimport { BBoxForm } from \"./BBoxForm\";\nimport { LineContainer } from \"./LineContainer\";\nimport { FeatureInfoDisplay } from \"./FeatureInfoDisplay\";\n\nconst TILE_KEY = \"tLsFLpESk6ikup9Az8ia\";\n\nconst mapTilerProvider = (\n  x: number,\n  y: number,\n  z: number,\n  dpr: any\n): string => {\n  return `https://api.maptiler.com/maps/streets/256/${z}/${x}/${y}${\n    dpr >= 2 ? \"@2x\" : \"\"\n  }.png?key=${TILE_KEY}`;\n};\n\n// offsets value for minimum Lat and Lng of Bound Box\nconst createMinBoundary = (value: number) => {\n  return value - 0.05 / 69;\n};\n\n// offsets value for minimum Lat and Lng of Bound Box\nconst createMaxBoundary = (value: number) => {\n  return value + 0.05 / 69;\n};\n\n// creates a bbox approximately 160 metre diameter\nexport const createBBoxFromClickedCoords = (coords: Point) => {\n  return [\n    createMinBoundary(coords[1]),\n    createMinBoundary(coords[0]),\n    createMaxBoundary(coords[1]),\n    createMaxBoundary(coords[0]),\n  ];\n};\n\nfunction App() {\n  const defaultCentre: Point = [51.50061, -0.14752];\n  const defaultZoom = 16.5;\n  const [bboxCoords, setBBoxCoords] = React.useState<number[]>([\n    -0.14379,\n    51.50008,\n    -0.14235,\n    51.50152,\n  ]);\n\n  const [data, updateData] = React.useState<any | undefined>();\n  const [activeFeature, setActiveFeature] = React.useState<\n    string | undefined\n  >();\n\n  React.useEffect(() => {\n    async function getDataSet(bboxCoords: number[]) {\n      try {\n        const bbGeoJson = await getBBGeoJson(bboxCoords);\n        updateData(bbGeoJson);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getDataSet(bboxCoords);\n  }, [bboxCoords]);\n\n  const selectedFeature = data?.features.find(\n    (feature: any) => feature.id === activeFeature\n  );\n\n  return (\n    <div style={{ height: \"100vh\", width: \"100vw\" }}>\n      <BBoxForm submit={(bboxCoords) => setBBoxCoords(bboxCoords)} />\n      {activeFeature && selectedFeature ? (\n        <FeatureInfoDisplay name={selectedFeature.properties.name} />\n      ) : null}\n\n      <Map\n        defaultCenter={defaultCentre}\n        defaultZoom={defaultZoom}\n        provider={mapTilerProvider}\n        onClick={({ latLng }) => {\n          setBBoxCoords(createBBoxFromClickedCoords(latLng));\n          console.log(bboxCoords, data.features);\n        }}\n      >\n        {data ? (\n          <LineContainer\n            features={data.features}\n            activeFeature={activeFeature}\n            featureClicked={setActiveFeature}\n          />\n        ) : null}\n      </Map>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}